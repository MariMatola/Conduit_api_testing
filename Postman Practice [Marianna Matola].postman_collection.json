{
	"info": {
		"_postman_id": "e699b406-a85e-471e-afee-25560b8a9cca",
		"name": "Postman Practice [Marianna Matola]",
		"description": "!!! Important !!!\n\n- All tests are written that way: **if the status code test fails**, then **all other tests** (which fail too) **are not displayed**  \n    **for example:** 'Sign up with a username with 41 symbols' - we receive a 200 status code instead of 422 so there is no need to run tests checking if the validation message is correct, so **these tests are written in an 'if' statement checking status code.**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35369534",
		"_collection_link": "https://www.postman.com/mariannamatola/workspace/postman-practice-marianna-matola/collection/35369534-e699b406-a85e-471e-afee-25560b8a9cca?action=share&source=collection_link&creator=35369534"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Sign In",
					"item": [
						{
							"name": "Successful Sign In",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Sign In' folder post-responce\r",
											"const successfulSignInHelper = pm.collectionVariables.get('successfulSignIn');\r",
											"const successfulSignIn = eval(successfulSignInHelper);\r",
											"\r",
											"successfulSignIn();\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{email}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with non-existing credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email or password', 'is invalid');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"password\": \"{{$randomPassword}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with empty email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', 'can\\'t be blank');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with empty password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('password', 'can\\'t be blank');\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{email}}\", \r\n        \"password\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with invalid email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email or password', 'is invalid');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{$randomEmail}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with invalid password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email or password', 'is invalid');\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{email}}\", \r\n        \"password\": \"{{$randomPassword}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with spaces before valid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Sign In' folder post-responce\r",
											"const successfulSignInHelper = pm.collectionVariables.get('successfulSignIn');\r",
											"const successfulSignIn = eval(successfulSignInHelper);\r",
											"\r",
											"successfulSignIn();\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"  {{email}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with spaces after valid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Sign In' folder post-responce\r",
											"const successfulSignInHelper = pm.collectionVariables.get('successfulSignIn');\r",
											"const successfulSignIn = eval(successfulSignInHelper);\r",
											"\r",
											"successfulSignIn();\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{email}}  \", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with spaces before valid password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email or password', 'is invalid');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{email}}\", \r\n        \"password\": \"  {{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign in with  spaces after valid password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email or password', 'is invalid');\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{email}}\", \r\n        \"password\": \"{{passwordConduit}}  \"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign In with username insead of email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email or password', 'is invalid');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{username}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users/login",
									"host": [
										"{{url}}users"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"// Successful sign in tests\r",
									"const successfulSignIn = () =>{\r",
									"\r",
									"\tpm.test('Assert status code is 200', function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    \r",
									"    if (pm.response.status === 'OK'){\r",
									"        pm.test('Assert response contains email', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            const email = pm.collectionVariables.get(\"email\");\r",
									"\r",
									"            pm.expect(jsonData.user.email)\r",
									"            .to.eql(email);\r",
									"        });\r",
									"\r",
									"        pm.test('Assert response contains username', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            const username = pm.collectionVariables.get(\"username\");\r",
									"\r",
									"            pm.expect(jsonData.user.username)\r",
									"            .to.eql(username);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Assert responce contains a property: token\", function () {\r",
									"            pm.response.to.have.jsonBody('user.token')\r",
									"        });\r",
									"\r",
									"        pm.test('Assert response contains empty bio', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.user.bio).to.eql(null);\r",
									"        });\r",
									"\r",
									"        pm.test('Assert response contains empty image', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.user.image)\r",
									"            .to.eql(null);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"const successfulSignInHelper = functionToString(successfulSignIn);\r",
									"pm.collectionVariables.set('successfulSignIn', successfulSignInHelper);\r",
									""
								]
							}
						}
					]
				},
				{
					"name": "Sign Up",
					"item": [
						{
							"name": "Successful sign up",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Sign Up' folder post-responce\r",
											"const successfulSignUpHelper = pm.collectionVariables.get('successfulSignUp');\r",
											"const successfulSignUp = eval(successfulSignUpHelper);\r",
											"\r",
											"successfulSignUp();\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with taken username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-requests\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['This username is taken.']);\r",
											"\r",
											"\r",
											"// script is in the collection post-responces\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{username}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with taken email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-requests\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email is taken.']);\r",
											"\r",
											"// script is in the collection post-responces\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{email}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with username starting from number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{$randomInt}}{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with username with 41 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(41, \"usernameSignUp\", true);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with username with 1 symbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(1, \"usernameSignUp\", true);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with username with 3 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Sign Up' folder post-responce\r",
											"const successfulSignUpHelper = pm.collectionVariables.get('successfulSignUp');\r",
											"const successfulSignUp = eval(successfulSignUpHelper);\r",
											"\r",
											"successfulSignUp();\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(3, \"usernameSignUp\", true);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with username with spaces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(5, \"usernameSignUp\", false, ' ');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with empty username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with username containing Cyrillic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomStringHelper = pm.collectionVariables.get('randomString');\r",
											"const randomString = eval(randomStringHelper);\r",
											"randomString(5, 'CyrilicText', 'cyrillic');\r",
											"\r",
											"const addCyrillic = pm.collectionVariables.get(\"CyrilicText\");\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(5, \"usernameSignUp\", false, addCyrillic);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"pm.collectionVariables.unset(\"CyrilicText\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with empty email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email without @",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(5, \"emailSignUp\", '@');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email without .",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(5, \"emailSignUp\", '', '.');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email without name part",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(0, \"emailSignUp\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email with more than 254 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"// 245(symbols for name part) + 1(@ symbol)+ 5(domail before dot) + 1 (dot symbol) + 3 (tld symbols) = 255 symbols \r",
											"randomEmailSolo(245, \"emailSignUp\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email containing backslash (\\)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"emailSignUp\", '', '', '\\\\');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email containing slash (/)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"emailSignUp\", '', '', '/');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email containing colon (:)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"emailSignUp\", '', '', ':');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email containing quotation mark (\")",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"emailSignUp\", '', '', '\"');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email containing less than symbol (<)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"emailSignUp\", '', '', '<');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with email containing greater than symbol (>)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"emailSignUp\", '', '', '>');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordConduit}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with empty password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('password', 'can\\'t be blank');\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with password containing only small letters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomStringHelper = pm.collectionVariables.get('randomString');\r",
											"const randomString = eval(randomStringHelper);\r",
											"randomString(5, 'passwordSmallLetters', 'latinSmall');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('password', 'This password does not seem valid.');\r",
											"\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"pm.collectionVariables.unset(\"passwordSmallLetters\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordSmallLetters}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sign up with password containing only numbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const randomStringHelper = pm.collectionVariables.get('randomString');\r",
											"const randomString = eval(randomStringHelper);\r",
											"randomString(5, 'passwordOnlyIntegers', 'integer');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('password', 'This password does not seem valid.');\r",
											"\r",
											"// script is in the 'Sign Up' folder post-responce\r",
											"const deleteVariablesSignUpHelper = pm.collectionVariables.get('deleteVariablesSignUp');\r",
											"const deleteVariablesSignUp = eval(deleteVariablesSignUpHelper);\r",
											"\r",
											"deleteVariablesSignUp();\r",
											"\r",
											"pm.collectionVariables.unset(\"passwordOnlyIntegers\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\" : {\r\n        \"username\": \"{{usernameSignUp}}\", \r\n        \"email\": \"{{emailSignUp}}\", \r\n        \"password\": \"{{passwordOnlyIntegers}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}users",
									"host": [
										"{{url}}users"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// script is in the collection pre-request\r",
									"const randomCredentialsHelper = pm.collectionVariables.get('randomCredentials');\r",
									"const randomCredentials = eval(randomCredentialsHelper);\r",
									"\r",
									"randomCredentials(\"usernameSignUp\", \"emailSignUp\");\r",
									"\r",
									"\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"// Successful sign up tests\r",
									"const successfulSignUp = () =>{\r",
									"\r",
									"\tpm.test('Assert status code is 200', function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if(pm.response.status === 'OK'){\r",
									"\r",
									"        pm.test('Assert response contains email', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            const email = pm.collectionVariables.get(\"emailSignUp\").toLowerCase();\r",
									"\r",
									"            pm.expect(jsonData.user.email).to.eql(email);\r",
									"        });\r",
									"\r",
									"        pm.test('Assert response contains username', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            const username = pm.collectionVariables.get(\"usernameSignUp\").toLowerCase();\r",
									"\r",
									"            pm.expect(jsonData.user.username).to.eql(username);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Assert responce contains a property: token\", function () {\r",
									"            pm.response.to.have.jsonBody('user.token')\r",
									"        });\r",
									"\r",
									"        pm.test('Assert response contains empty bio', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.user.bio).to.eql(null);\r",
									"        });\r",
									"\r",
									"        pm.test('Assert response contains empty image', function () {\r",
									"            const jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.user.image).to.eql(null);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"const successfulSignUpHelper = functionToString(successfulSignUp);\r",
									"pm.collectionVariables.set('successfulSignUp', successfulSignUpHelper);\r",
									"\r",
									"\r",
									"// Function to delete created during sign up collection variables: token, email, username\r",
									"const deleteVariablesSignUp = () =>{\r",
									"    pm.collectionVariables.unset(\"usernameSignUp\");\r",
									"    pm.collectionVariables.unset(\"emailSignUp\");\r",
									"}\r",
									"\r",
									"const deleteVariablesSignUpHelper = functionToString(deleteVariablesSignUp);\r",
									"pm.collectionVariables.set('deleteVariablesSignUp', deleteVariablesSignUpHelper);"
								]
							}
						}
					]
				},
				{
					"name": "Get Info",
					"item": [
						{
							"name": "Get info about user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get info about user without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Info",
					"item": [
						{
							"name": "Update info about user: image (URL)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"// Assert image contains a URL value\r",
											"pm.test(\"Response is a valid URL\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user.image).not.eql(null);\r",
											"    pm.expect(jsonData.user.image).to.be.a(\"string\"); \r",
											"    pm.expect(jsonData.user.image).to.match(/^https?:\\/\\/.+\\..+/, \"Response is not a valid URL\"); \r",
											"});\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"image\":\"{{$randomAvatarImage}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: image with plain text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('image', ['This image URL does not seem valid.']);\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"image\":\"{{$randomWord}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: empty image property",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"// Assert image contains a URL value\r",
											"pm.test(\"Empty image property in responce\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user.image).to.eql('');\r",
											"});\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"image\":\"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: bio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// create a variable containing a string of length less than 255 symbols\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);\r",
											"\r",
											"randomLengthText(1, 225);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"pm.test('Assert response contains bio value', function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user.bio).not.eql(null);\r",
											"});\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"randomText\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"bio\":\"{{randomText}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: bio with more than 255 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);\r",
											"\r",
											"randomLengthText(256, 300);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('bio', ['Bio must be 255 characters and less']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"randomText\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"bio\":'{{randomText}}'\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(5, \"username2\", false);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"pm.test('Assert response contains different username value', function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user.username).not.eql('{{username}}');\r",
											"});\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"username2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{username2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with username starting with numbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(5, \"username2\", false);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"username2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{$randomInt}}{{username2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with username containing 41 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(41, \"username2\", true);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"username2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{username2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with username containing 1 symbol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(1, \"username2\", true);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"username2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{username2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with username containing spaces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(5, \"username2\", false, ' ');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"username2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{username2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with username containing Cyrillic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomStringHelper = pm.collectionVariables.get('randomString');\r",
											"const randomString = eval(randomStringHelper);\r",
											"randomString(5, 'CyrilicText', 'cyrillic');\r",
											"\r",
											"const addCyrillic = pm.collectionVariables.get(\"CyrilicText\");\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomUsernameSoloHelper = pm.collectionVariables.get('randomUsernameSolo');\r",
											"const randomUsernameSolo = eval(randomUsernameSoloHelper);\r",
											"\r",
											"randomUsernameSolo(5, \"username2\", false, addCyrillic);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"username2\");\r",
											"pm.collectionVariables.unset(\"CyrilicText\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{username2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with empty username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['Username must start with a letter, have no spaces, and be 2 - 40 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: username with taken username",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function() {\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"}, 2000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('username', ['This username is taken.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"username\":\"{{username1}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(8, \"email2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"pm.test('Assert response contains different email value', function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.user.email).not.eql('{{email}}');\r",
											"});\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"email2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"{{email2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email with taken email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"}, 2000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email is taken.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"{{email1}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email with empty email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email with email without @",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(5, \"email2\", '@');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"email2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"{{email2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email with email without .",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(5, \"email2\", '', '.');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"email2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"{{email2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email with email without name part",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"randomEmailSolo(0, \"email2\");\r",
											"setTimeout(function(){\r",
											"    pm.collectionVariables.set('timeout', 'to set timeout');\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"email2\");\r",
											"pm.collectionVariables.unset(\"timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"{{email2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: email with email with more than 254 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomEmailSoloHelper = pm.collectionVariables.get('randomEmailSolo');\r",
											"const randomEmailSolo = eval(randomEmailSoloHelper);\r",
											"\r",
											"// 245(symbols for name part) + 1(@ symbol)+ 5(domail before dot) + 1 (dot symbol) + 3 (tld symbols) = 255 symbols \r",
											"randomEmailSolo(245, \"email2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('email', ['This email does not seem valid.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset(\"email2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\":\"{{email2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// to have variable for sign in in the post-response\r",
											"const NewPasswordHelper = pm.variables.replaceIn('{{$randomPassword}}');\r",
											"pm.variables.set(\"newPassword\", NewPasswordHelper);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"//// script is in the collection post-responce\r",
											"const signInRequestHelper = pm.collectionVariables.get('signInRequest');\r",
											"const signInRequest = eval(signInRequestHelper);\r",
											"const emailHelper = pm.variables.get(\"email\");\r",
											"const passwordHelper = pm.variables.get(\"newPassword\");\r",
											"\r",
											"signInRequest(emailHelper, passwordHelper, true);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.variables.unset(\"newPassword\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"password\":\"{{newPassword}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user: empty password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// to have variable for sign in in the post-response\r",
											"const NewPasswordHelper = '';\r",
											"pm.variables.set(\"newPassword\", NewPasswordHelper);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'User' folder post-responce\r",
											"const basicAuthorizedTestsHelper = pm.collectionVariables.get('basicAuthorizedTests');\r",
											"const basicAuthorizedTests = eval(basicAuthorizedTestsHelper);\r",
											"\r",
											"basicAuthorizedTests();\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const signInRequestHelper = pm.collectionVariables.get('signInRequest');\r",
											"const signInRequest = eval(signInRequestHelper);\r",
											"const emailHelper = pm.variables.get(\"email\");\r",
											"const passwordHelper = pm.variables.get(\"newPassword\");\r",
											"\r",
											"signInRequest(emailHelper, passwordHelper, false);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.variables.unset(\"newPassword\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"password\":\"{{newPassword}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user",
									"host": [
										"{{url}}user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update info about user without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests()\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"{{$randomEmail}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}user?Authorization=null",
									"host": [
										"{{url}}user"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "null"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// to convert helper to string\r",
							"function functionToString(helper) {\r",
							"    return helper.toString();\r",
							"}\r",
							"\r",
							"\r",
							"// basic tests for successful authorization\r",
							"const basicAuthorizedTests = () =>{\r",
							"  \r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    if (pm.response.status === 'OK'){\r",
							"        pm.test(\"Assert responce contains a property: username\", function () {\r",
							"            pm.response.to.have.jsonBody('user.username')\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: email\", function () {\r",
							"            pm.response.to.have.jsonBody('user.email')\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: token\", function () {\r",
							"            pm.response.to.have.jsonBody('user.token')\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: bio\", function () {\r",
							"            pm.response.to.have.jsonBody('user.bio')\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: image\", function () {\r",
							"            pm.response.to.have.jsonBody('user.image')\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"const basicAuthorizedTestsHelper = functionToString(basicAuthorizedTests);\r",
							"pm.collectionVariables.set('basicAuthorizedTests', basicAuthorizedTestsHelper);\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Articles",
			"item": [
				{
					"name": "Create Article",
					"item": [
						{
							"name": "Create an article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"const slug = pm.response.json().article.slug;\r",
											"pm.collectionVariables.set(\"articleSlug\", slug);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"pm.collectionVariables.unset(\"articleSlug\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: empty title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 0, 0);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('title', ['Article title cannot be empty']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: title with more than 255 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 256, 260);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('title', ['Article title must be 1 - 255 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: empty description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 1, 255, 0, 0);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('description', ['Article description cannot be empty']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: description with more than 255 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 1, 255, 256, 260);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('description', ['Article description must be 1 - 255 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: empty body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 1, 255, 1, 255, 0, 0);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('body', ['Article body cannot be empty']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: body with more than 65536 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 1, 255, 1, 255, 65537, 65550);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('body', ['Article body must be 1 - 65536 characters.']);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"pm.collectionVariables.unset(\"Timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article: no tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 1, 255, 1, 255, 1, 65536, 0, 0);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"const slug = pm.response.json().article.slug;\r",
											"pm.collectionVariables.set(\"articleSlug\", slug);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"pm.collectionVariables.unset(\"articleSlug\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an article without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
											"const articleVariables = eval(articleVariablesHelper);\r",
											"\r",
											"articleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle}}\", \r\n\t\t\"description\": \"{{articleDescription}}\", \r\n\t\t\"body\": \"{{articleBody}}\", \r\n\t\t\"tagList\": {{articleTaglist}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Article",
					"item": [
						{
							"name": "Update an article: title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new title\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (1, 255, 'articleTitle2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'update', 'articleSlug', 'title', 'articleTitle2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: empty title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new title\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (0, 0, 'articleTitle2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('title', ['Article title cannot be empty']);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article:  title with more than 255 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new title\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (256, 260, 'articleTitle2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('title', ['Article title must be 1 - 255 characters.']);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new title\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (1, 255, 'articleDescription2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'update', 'articleSlug', 'description', 'articleDescription2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleDescription2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"description\": \"{{articleDescription2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: empty description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new description\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (0, 0, 'articleDescription2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('description', ['Article description cannot be empty']);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleDescription2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"description\": \"{{articleDescription2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: description with more than 255 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new description\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (256, 260, 'articleDescription2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('description', ['Article description must be 1 - 255 characters.']);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleDescription2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"description\": \"{{articleDescription2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new body\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (1, 30000, 'articleBody2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'update', 'articleSlug', 'body', 'articleBody2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleBody2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"body\": \"{{articleBody2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: empty body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new body\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (0, 0, 'articleBody2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('body', ['Article body cannot be empty']);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleBody2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"body\": \"{{articleBody2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: body with more than 65536 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"// create new body\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (65536, 65550, 'articleBody2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('body', ['Article body must be 1 - 65536 characters.']);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleBody2\");\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"body\": \"{{articleBody2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: taglist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const tagListCreationHelper = pm.collectionVariables.get('tagListCreation');\r",
											"const tagListCreation = eval(tagListCreationHelper);\r",
											"\r",
											"tagListCreation(38, 1, 'articleTaglist2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'update', 'articleSlug', 'tagList', 'articleTaglist2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTaglist2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"tagList\": {{articleTaglist2}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article: no tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const tagListCreationHelper = pm.collectionVariables.get('tagListCreation');\r",
											"const tagListCreation = eval(tagListCreationHelper);\r",
											"\r",
											"tagListCreation(0, 0, 'articleTaglist2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'update', 'articleSlug', 'tagList', 'articleTaglist2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTaglist2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"tagList\": {{articleTaglist2}}\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"}, 2000);\r",
											"\r",
											"// create new title\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (1, 255, 'articleTitle2');\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an article of another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        createNewUser('username2', 'email2', 'token2');\r",
											"    },2000);\r",
											"}, 2000);\r",
											"\r",
											"// create new title\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"randomLengthText (1, 255, 'articleTitle2');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const forbiddenTestsHelper = pm.collectionVariables.get(\"forbiddenTests\");\r",
											"const forbiddenTests = eval(forbiddenTestsHelper);\r",
											"\r",
											"forbiddenTests();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existing article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"// slug creation\r",
											"randomLengthText (10, 100, 'articleSlug', true);\r",
											"\r",
											"// create new title\r",
											"randomLengthText (1, 255, 'articleTitle2');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const notFoundTestsHelper = pm.collectionVariables.get(\"notFoundTests\");\r",
											"const notFoundTests = eval(notFoundTestsHelper);\r",
											"\r",
											"notFoundTests()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"article\": {\r\n\t\t\"title\": \"{{articleTitle2}}\"\r\n\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get articles",
					"item": [
						{
							"name": "Get an article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"  createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'get', 'articleSlug');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an article of other user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        createNewUser('username2', 'email2', 'token2');\r",
											"    },2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'get', 'articleSlug');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get non-existing article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"// slug creation\r",
											"randomLengthText (10, 100, 'articleSlug', true);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const notFoundTestsHelper = pm.collectionVariables.get(\"notFoundTests\");\r",
											"const notFoundTests = eval(notFoundTestsHelper);\r",
											"\r",
											"notFoundTests()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get article without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Article' folder post-responce\r",
											"const articleSuccessfulTestsHelper = pm.collectionVariables.get('articleSuccessfulTests');\r",
											"const articleSuccessfulTests = eval(articleSuccessfulTestsHelper);\r",
											"\r",
											"articleSuccessfulTests('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'username', 'create', 'articleSlug');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleTitle2\");\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Articles' folder post-responce\r",
											"const successfulGetArticlesHelper = pm.collectionVariables.get('successfulGetArticles');\r",
											"const successfulGetArticles = eval(successfulGetArticlesHelper);\r",
											"\r",
											"successfulGetArticles()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Articles' folder post-responce\r",
											"const successfulGetArticlesHelper = pm.collectionVariables.get('successfulGetArticles');\r",
											"const successfulGetArticles = eval(successfulGetArticlesHelper);\r",
											"\r",
											"successfulGetArticles()\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}articles",
									"host": [
										"{{url}}articles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles from Your feed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const followUserRequestHelper = pm.collectionVariables.get('followUserRequest');\r",
											"const followUserRequest = eval(followUserRequestHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function () {\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"    setTimeout(function () {\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist1', 'token2', 'articleSlug');\r",
											"        setTimeout(function () {\r",
											"            followUserRequest('username2', 'token1'); \r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Articles' folder post-responce\r",
											"const successfulGetArticlesHelper = pm.collectionVariables.get('successfulGetArticles');\r",
											"const successfulGetArticles = eval(successfulGetArticlesHelper);\r",
											"\r",
											"successfulGetArticles()\r",
											"\r",
											"pm.test(\"Assert that corresponding number of articles is returned\", function(){\r",
											"   const jsonData = pm.response.json();\r",
											"   const numberOfArticles = jsonData.articles.length\r",
											"   pm.expect(jsonData.articlesCount).to.eql(numberOfArticles);\r",
											"});\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleSlug\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/feed?limit=10&offset=0",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"feed"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles from Your feed without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const followUserRequestHelper = pm.collectionVariables.get('followUserRequest');\r",
											"const followUserRequest = eval(followUserRequestHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function () {\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"    setTimeout(function () {\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist1', 'token2', 'articleSlug');\r",
											"        setTimeout(function () {\r",
											"            followUserRequest('username2', 'token1'); \r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleSlug\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/feed?limit=10&offset=0",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"feed"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles from Global feed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Articles' folder post-responce\r",
											"const successfulGetArticlesHelper = pm.collectionVariables.get('successfulGetArticles');\r",
											"const successfulGetArticles = eval(successfulGetArticlesHelper);\r",
											"\r",
											"successfulGetArticles();\r",
											"\r",
											"pm.test(\"Assert that 10 articles are returned\", function(){\r",
											"   const jsonData = pm.response.json();\r",
											"   const numberOfArticles = jsonData.articles.length\r",
											"   pm.expect(numberOfArticles).to.eql(10);\r",
											"});\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles?limit=10&offset=0",
									"host": [
										"{{url}}articles"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles from Global feed without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Articles' folder post-responce\r",
											"const successfulGetArticlesHelper = pm.collectionVariables.get('successfulGetArticles');\r",
											"const successfulGetArticles = eval(successfulGetArticlesHelper);\r",
											"\r",
											"successfulGetArticles();\r",
											"\r",
											"pm.test(\"Assert that 10 articles are returned\", function(){\r",
											"   const jsonData = pm.response.json();\r",
											"   const numberOfArticles = jsonData.articles.length\r",
											"   pm.expect(numberOfArticles).to.eql(10);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}articles?limit=10&offset=0",
									"host": [
										"{{url}}articles"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get articles by tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in 'Get Articles' pre-request\r",
											"const getTagHelper = pm.collectionVariables.get('getTag');\r",
											"const getTag = eval(getTagHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        getTag('articleTaglist', 'tag');\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Articles' folder post-responce\r",
											"const successfulGetArticlesHelper = pm.collectionVariables.get('successfulGetArticles');\r",
											"const successfulGetArticles = eval(successfulGetArticlesHelper);\r",
											"\r",
											"successfulGetArticles();\r",
											"\r",
											"// script is in the 'Get Articles' folder post-responce\r",
											"const containSpecTagHelper = pm.collectionVariables.get('containSpecTag');\r",
											"const containSpecTag = eval(containSpecTagHelper);\r",
											"\r",
											"containSpecTag('tag');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset(\"articleSlug\");\r",
											"pm.collectionVariables.unset(\"tag\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}articles?limit=10&tag={{tag}}&offset=0",
									"host": [
										"{{url}}articles"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "tag",
											"value": "{{tag}}"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"\r",
									"// to get specific tag from a taglist\r",
									"// accepts:\r",
									"// allTags - string - a name of the variable containing the taglist\r",
									"// tagVarName - string - a name of the variable containing the resulting tag\r",
									"\r",
									"const getTag = (allTags, tagVarName, noHashTag = 'noHash') =>{\r",
									"\r",
									"    const taglist = JSON.parse(pm.collectionVariables.get(allTags));\r",
									"\r",
									"    const taglisttLength = taglist.length;\r",
									"    const tagIndex = Math.floor(Math.random() * taglisttLength);\r",
									"\tconsole.log(taglist[tagIndex]);\r",
									"    pm.collectionVariables.set(tagVarName, taglist[tagIndex]);\r",
									"}\r",
									"\r",
									"const getTagHelper = functionToString(getTag);\r",
									"pm.collectionVariables.set('getTag', getTagHelper);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"// tests for successful get articles requests\r",
									"const successfulGetArticles = () =>{\r",
									"\tpm.test(\"Status code is 200\", function () {\r",
									"\t\tpm.response.to.have.status(200);\r",
									"\t});\r",
									"\r",
									"\tconst jsonData = pm.response.json()\r",
									"\tif (pm.response.status === 'OK'){\r",
									"\t\tpm.test(\"Assert responce contains a property: articles\", function () {\r",
									"\t\t\tpm.response.to.have.jsonBody('articles');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Assert property 'articles' has as a value an array containing articles\", function () {\r",
									"\t\t\tif (pm.expect(jsonData.articles).to.be.an('array')){\r",
									"\t\t\t\tjsonData.articles.forEach((article) => {\r",
									"\t\t\t\t\tpm.expect(article).to.be.an('object').that.is.not.empty;\r",
									"\t\t\t\t\tpm.expect(article).to.have.property('slug');\r",
									"\t\t\t\t});\r",
									"\t\t\t}\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Assert responce contains a property: articlesCount\", function () {\r",
									"\t\t\tpm.response.to.have.jsonBody('articlesCount');\r",
									"\t\t});\r",
									"\t}\r",
									"}\r",
									"\r",
									"const successfulGetArticlesHelper = functionToString(successfulGetArticles);\r",
									"pm.collectionVariables.set('successfulGetArticles', successfulGetArticlesHelper);\r",
									"\r",
									"// tests to assert that tag is in the responce\r",
									"// accept:\r",
									"// tagVatName - string - variable containing tag \r",
									"const containSpecTag = (tagVatName) =>{\r",
									"    const jsonData = pm.response.json();\r",
									"    if (pm.response.status === 'OK'){\r",
									"        pm.test(\"Assert articles in response contain the specified tag\", function() {\r",
									"            // pm.expect(JSON.parse(jsonData.articles)).to.be.an('array').that.is.not.empty;\r",
									"\t\t    jsonData.articles.forEach((article) => {\r",
									"\t\t\t    pm.expect(article).to.be.an('object').that.is.not.empty;\r",
									"                pm.expect(article.tagList).to.include(pm.collectionVariables.get(tagVatName));\r",
									"\t\t    });\r",
									"\t    });\r",
									"    }\r",
									"}\r",
									"\r",
									"const containSpecTagHelper = functionToString(containSpecTag);\r",
									"pm.collectionVariables.set('containSpecTag', containSpecTagHelper);"
								]
							}
						}
					]
				},
				{
					"name": "Delete Article",
					"item": [
						{
							"name": "Delete an article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const noContentTestsHelper = pm.collectionVariables.get(\"noContentTests\");\r",
											"const noContentTests = eval(noContentTestsHelper);\r",
											"\r",
											"noContentTests()\r",
											"\r",
											"// script is in the 'Delete Articles' folder post-responce\r",
											"const getArticleRequestHelper = pm.collectionVariables.get('getArticleRequest');\r",
											"const getArticleRequest = eval(getArticleRequestHelper);\r",
											"\r",
											"getArticleRequest('articleSlug', true);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an article without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests()\r",
											"\r",
											"// script is in the 'Delete Articles' folder post-responce\r",
											"const getArticleRequestHelper = pm.collectionVariables.get('getArticleRequest');\r",
											"const getArticleRequest = eval(getArticleRequestHelper);\r",
											"\r",
											"getArticleRequest('articleSlug', false);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an article of another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username', 'email', 'token');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token', 'articleSlug');\r",
											"    setTimeout(function(){\r",
											"        pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const forbiddenTestsHelper = pm.collectionVariables.get(\"forbiddenTests\");\r",
											"const forbiddenTests = eval(forbiddenTestsHelper);\r",
											"\r",
											"forbiddenTests()\r",
											"\r",
											"// script is in the 'Delete Articles' folder post-responce\r",
											"const getArticleRequestHelper = pm.collectionVariables.get('getArticleRequest');\r",
											"const getArticleRequest = eval(getArticleRequestHelper);\r",
											"\r",
											"getArticleRequest('articleSlug', false);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non-existing article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"// slug creation\r",
											"randomLengthText (10, 100, 'articleSlug', true);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const notFoundTestsHelper = pm.collectionVariables.get(\"notFoundTests\");\r",
											"const notFoundTests = eval(notFoundTestsHelper);\r",
											"\r",
											"notFoundTests();\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"// to send request for getting an article\r",
									"// accepts:\r",
									"// articleSlugVarName - string - name of the variable containing the article slug\r",
									"// deleteSuccess - boolean - true - if we need test to assert that article was deleted / false - if we need to assert that article was not deleted\r",
									"\r",
									"const getArticleRequest = (articleSlugVarName, deleteSuccess) =>{\r",
									"\tconst BASE_URL = pm.collectionVariables.get('url');\r",
									"\tconst articleSlug = pm.collectionVariables.get(articleSlugVarName);\r",
									"\tconst url = BASE_URL + 'articles/'+ articleSlug;\r",
									"\r",
									"\tconst requestStructure = {\r",
									"\t\turl,  \r",
									"\t\tmethod: 'GET',  \r",
									"\t\theader: {},\r",
									"\t\tbody: {  \r",
									"\t\t\tmode: 'none'\r",
									"\t\t}\r",
									"\t};\r",
									"\tpm.sendRequest(requestStructure, (error, response) => {\r",
									"\t\tif (deleteSuccess){\r",
									"\t\t\tpm.test(\"User is not able to find article after the request\", function () {\r",
									"\t\t\t\tpm.expect(response.status).to.eql('Not Found');\r",
									"\t\t\t});\r",
									"\t\t} else {\r",
									"\t\t\tpm.test('User is able to find article after the request', function () {\r",
									"\t\t\t\tpm.expect(response.status).to.eql('OK');\r",
									"\t\t\t});\t\r",
									"\t\t}\r",
									"\t});\r",
									"}\r",
									"\r",
									"const getArticleRequestHelper = functionToString(getArticleRequest);\r",
									"pm.collectionVariables.set('getArticleRequest', getArticleRequestHelper);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// to convert helper to string\r",
							"function functionToString(helper) {\r",
							"    return helper.toString();\r",
							"}\r",
							"\r",
							"\r",
							"// tests for status code 200 after the article creation or update\r",
							"// accepts:\r",
							"// titleVar - string - name of variable containing article title\r",
							"// descriptionVar - string - name of variable containing article description \r",
							"// bodyVar - string - name of variable containing article body\r",
							"// tagListVar - string - name of variable containing article taglist\r",
							"// usernameVar - string - name of variable containing article's author usermane\r",
							"// requestType - string - 'create'(default)/'update'/'get'\r",
							"// slugVar - string - ''(default)/ name of variable containing article's slug (for update)\r",
							"// changed - string - indicates what property is changed ''(default)/'title'/'description'/'body'/'tagList'\r",
							"// chagedVar -string - ''(default)/name of variable containing changed property (for update)\r",
							"const articleSuccessfulTests = (titleVar, descriptionVar, bodyVar, tagListVar, usernameVar, requestType = 'create', slugVar = '', changed = '', chagedVar = '') =>{\r",
							"\r",
							"\tpm.test(\"Status code is 200\", function () {\r",
							"\t\tpm.response.to.have.status(200);\r",
							"\t});\r",
							"\r",
							"\tif (pm.response.status === 'OK'){\r",
							"\r",
							"\t\t// accerting slug results\r",
							"\t\tif (requestType === 'create' || requestType === 'get'){\r",
							"\t\t\tpm.test(\"Assert responce contains a property: slug\", function () {\r",
							"\t\t\t\tpm.response.to.have.jsonBody('article.slug');\r",
							"\t\t\t});\r",
							"\t\t} else {\r",
							"\t\t\tpm.test('Assert response contains article slug', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst slug = pm.collectionVariables.get(slugVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.slug).to.eql(slug);\r",
							"\t\t\t});\r",
							"\t\t}\r",
							"\r",
							"\t\t// accerting title results\r",
							"\t\tif (changed === 'title'){\r",
							"\t\t\tpm.test('Assert response contains article changed title', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst title1 = pm.collectionVariables.get(titleVar);\r",
							"\t\t\t\tconst title2 = pm.collectionVariables.get(chagedVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.title).not.eql(title1);\r",
							"\t\t\t\tpm.expect(jsonData.article.title).to.eql(title2);\r",
							"\t\t\t}); \r",
							"\t\t} else {\r",
							"\t\t\tpm.test('Assert response contains article title', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst title = pm.collectionVariables.get(titleVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.title).to.eql(title);\r",
							"\t\t\t});\r",
							"\t\t}\r",
							"\t\t\r",
							"\t\t// accerting description results\r",
							"\t\tif (changed === 'description'){\r",
							"\t\t\tpm.test('Assert response contains article changed description', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst description1 = pm.collectionVariables.get(descriptionVar);\r",
							"\t\t\t\tconst description2 = pm.collectionVariables.get(chagedVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.description).not.eql(description1);\r",
							"\t\t\t\tpm.expect(jsonData.article.description).to.eql(description2);\r",
							"\t\t\t}); \r",
							"\t\t} else {\r",
							"\t\t\tpm.test('Assert response contains article description', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst description = pm.collectionVariables.get(descriptionVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.description).to.eql(description);\r",
							"\t\t\t});\r",
							"\t\t}\r",
							"\t\t\r",
							"\t\t// accerting body results\r",
							"\t\tif (changed === 'body'){\r",
							"\t\t\tpm.test('Assert response contains article changed body', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst body1 = pm.collectionVariables.get(bodyVar);\r",
							"\t\t\t\tconst body2 = pm.collectionVariables.get(chagedVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.body).not.eql(body1);\r",
							"\t\t\t\tpm.expect(jsonData.article.body).to.eql(body2);\r",
							"\t\t\t}); \r",
							"\t\t} else {\r",
							"\t\t\tpm.test('Assert response contains article body', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst body = pm.collectionVariables.get(bodyVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.body).to.eql(body);\r",
							"\t\t\t});\r",
							"\t\t}\r",
							"\t\t\r",
							"\t\tpm.test(\"Assert responce contains a property: createdAt\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('article.createdAt');\r",
							"\t\t});\r",
							"\r",
							"\t\tpm.test(\"Assert responce contains a property: updatedAt\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('article.updatedAt');\r",
							"\t\t});\r",
							"\t\t\r",
							"\t\t// assert that createAt is equal/different to updatedAt\r",
							"\t\tif (requestType === 'create' || requestType === 'get'){\r",
							"\t\t\tpm.test(\"updatedAt property is equal to createdAt property\", function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tpm.expect(jsonData.article.createdAt).to.eql(jsonData.article.updatedAt);\r",
							"\t\t\t}); \r",
							"\t\t} else {\r",
							"\t\t\tpm.test(\"updatedAt property is different from createdAt property\", function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tpm.expect(jsonData.article.createdAt).not.eql(jsonData.article.updatedAt);\r",
							"\t\t\t});   \r",
							"\t\t}\r",
							"\r",
							"\t\t// accerting taglist results\r",
							"\t\tif (changed === 'tagList'){\r",
							"\t\t\tpm.test('Assert response contains article changed tagList', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst tagList1 = JSON.parse(pm.collectionVariables.get(tagListVar));\r",
							"\t\t\t\tconst tagList2 = JSON.parse(pm.collectionVariables.get(chagedVar));\r",
							"\t\t\t\tpm.expect(jsonData.article.tagList).not.eql(tagList1);\r",
							"\t\t\t\tpm.expect(jsonData.article.tagList).to.eql(tagList2);\r",
							"\t\t\t}); \r",
							"\t\t} else {\r",
							"\t\t\tpm.test('Assert response contains article taglist', function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst tagList = JSON.parse(pm.collectionVariables.get(tagListVar));\r",
							"\t\t\t\tpm.expect(jsonData.article.tagList).to.eql(tagList);\r",
							"\t\t\t});\r",
							"\t\t}\r",
							"\r",
							"\t\tpm.test(\"Assert responce contains a property: favorited\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('article.favorited');\r",
							"\t\t});\r",
							"\r",
							"\t\tpm.test(\"Assert responce contains a property: favoritesCount\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('article.favoritesCount');\r",
							"\t\t});\r",
							"\t\t\r",
							"\t\tif (requestType === 'create' || requestType === 'update')   {\r",
							"\t\t\tpm.test(\"Assert responce contains a property: author's username\", function () {\r",
							"\t\t\t\tconst jsonData = pm.response.json();\r",
							"\t\t\t\tconst username = pm.collectionVariables.get(usernameVar);\r",
							"\t\t\t\tpm.expect(jsonData.article.author.username).to.eql(username);\r",
							"\t\t\t});\r",
							"\t\t} else {\r",
							"\t\t\tpm.test(\"Assert responce contains a property: author's username\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('article.author.username');\r",
							"\t\t\t});\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"const articleSuccessfulTestsHelper = functionToString(articleSuccessfulTests);\r",
							"pm.collectionVariables.set('articleSuccessfulTests', articleSuccessfulTestsHelper);"
						]
					}
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Get Profile",
					"item": [
						{
							"name": "Get info about profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');\r",
											"createNewUser('username1', 'email1', 'token1');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Profile' folder post-responce\r",
											"const userProfileTestsHelper = pm.collectionVariables.get('userProfileTests');\r",
											"const userProfileTests = eval(userProfileTestsHelper);\r",
											"userProfileTests('username');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											"deleteVariables('username1', 'email1', 'token1');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}profiles/{{username}}",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get info about your profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Profile' folder post-responce\r",
											"const userProfileTestsHelper = pm.collectionVariables.get('userProfileTests');\r",
											"const userProfileTests = eval(userProfileTestsHelper);\r",
											"userProfileTests('username');\r",
											"\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}profiles/{{username}}",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get info about profile without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Profile' folder post-responce\r",
											"const userProfileTestsHelper = pm.collectionVariables.get('userProfileTests');\r",
											"const userProfileTests = eval(userProfileTestsHelper);\r",
											"userProfileTests('username');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username', 'email', 'token');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}profiles/{{username}}",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Follow Profile",
					"item": [
						{
							"name": "Follow the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Profile' folder post-responce\r",
											"const userProfileTestsHelper = pm.collectionVariables.get('userProfileTests');\r",
											"const userProfileTests = eval(userProfileTestsHelper);\r",
											"userProfileTests('username1',true);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"}, 2000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Follow the user without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Follow yourself",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const forbiddenTestsHelper = pm.collectionVariables.get(\"forbiddenTests\");\r",
											"const forbiddenTests = eval(forbiddenTestsHelper);\r",
											"\r",
											"forbiddenTests()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Follow the followed before user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const forbiddenTestsHelper = pm.collectionVariables.get(\"forbiddenTests\");\r",
											"const forbiddenTests = eval(forbiddenTestsHelper);\r",
											"\r",
											"forbiddenTests()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const followUserRequestHelper = pm.collectionVariables.get('followUserRequest');\r",
											"const followUserRequest = eval(followUserRequestHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"\tcreateNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"\t    followUserRequest('username1', 'token2');\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Folow user after unfollowing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Profile' folder post-responce\r",
											"const userProfileTestsHelper = pm.collectionVariables.get('userProfileTests');\r",
											"const userProfileTests = eval(userProfileTestsHelper);\r",
											"userProfileTests('username1',true);\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const followUserRequestHelper = pm.collectionVariables.get('followUserRequest');\r",
											"const followUserRequest = eval(followUserRequestHelper);\r",
											"\r",
											"// script is in the 'Profile' folder pre-request\r",
											"const unfollowProfileRequestHelper = pm.collectionVariables.get('unfollowProfileRequest');\r",
											"const unfollowProfileRequest = eval(unfollowProfileRequestHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"\tcreateNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"\t    followUserRequest('username1', 'token2');\r",
											"        setTimeout(function(){\r",
											"\t        unfollowProfileRequest('username1', 'token2');\r",
											"        }, 1000);\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unfollow Profile",
					"item": [
						{
							"name": "Unfollow the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Profile' folder post-responce\r",
											"const userProfileTestsHelper = pm.collectionVariables.get('userProfileTests');\r",
											"const userProfileTests = eval(userProfileTestsHelper);\r",
											"userProfileTests('username1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const followUserRequestHelper = pm.collectionVariables.get('followUserRequest');\r",
											"const followUserRequest = eval(followUserRequestHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"\tcreateNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"\t  followUserRequest('username1', 'token2');\r",
											"  }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unfollow the user without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const followUserRequestHelper = pm.collectionVariables.get('followUserRequest');\r",
											"const followUserRequest = eval(followUserRequestHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"\tcreateNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"\t    followUserRequest('username1', 'token2');\r",
											"  }, 2000);\r",
											"}, 2000);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}profiles/{{username1}}/follow",
									"host": [
										"{{url}}profiles"
									],
									"path": [
										"{{username1}}",
										"follow"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// to convert helper to string\r",
							"function functionToString(helper) {\r",
							"    return helper.toString();\r",
							"}\r",
							"\r",
							"// to unfolow user\r",
							"// accepts:\r",
							"// usernameVarName - name of the variable containing the username of the user who should be followed\r",
							"// tokenVarName - name of the variable containing the token of the user who is following other user\r",
							"const unfollowProfileRequest = (usernameVarName, tokenVarName) => {\r",
							"\tconst BASE_URL = pm.collectionVariables.get('url');\r",
							"\tconst usernameToFollow = pm.collectionVariables.get(usernameVarName);\r",
							"\tconst url = BASE_URL + `profiles/${usernameToFollow}/follow`;\r",
							"\tconst tokenUser = 'Token ' + pm.collectionVariables.get(tokenVarName);\r",
							"\r",
							"\r",
							"\tconst requestStructure = {\r",
							"\t\turl,  \r",
							"\t\tmethod: 'DELETE',  \r",
							"\t\theader: {  \r",
							"\t\t\t'Authorization': tokenUser\r",
							"\t\t},\r",
							"\t\tbody: {  \r",
							"\t\t\tmode: 'none'\r",
							"\t\t}\r",
							"\t}\r",
							"\r",
							"\tpm.sendRequest(requestStructure, (error, response) => {\r",
							"\t\tconsole.log(error ? error : response.json());\r",
							"\t});\r",
							"};\r",
							"\r",
							"const unfollowProfileRequestHelper = functionToString(unfollowProfileRequest); \r",
							"pm.collectionVariables.set('unfollowProfileRequest', unfollowProfileRequestHelper);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// to convert helper to string\r",
							"function functionToString(helper) {\r",
							"    return helper.toString();\r",
							"}\r",
							"\r",
							"// succesful user's profile tests\r",
							"// accepts:\r",
							"// usernameVarName - name of the variable containing the username\r",
							"// following - 'true' if following should be true/ 'false' is following should be false (default)\r",
							"const userProfileTests = (usernameVarName, following = false) =>{\r",
							"\tpm.test(\"Status code is 200\", function () {\r",
							"\t    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\tif (pm.response.status === 'OK'){\r",
							"\t\tconst jsonData = pm.response.json();\r",
							"\r",
							"\t\tpm.test('Assert response contains username', function () {\r",
							"\t\t\tconst username = pm.collectionVariables.get(usernameVarName);\r",
							"\t\t\tpm.expect(jsonData.profile.username).to.eql(username);\r",
							"\t\t});\r",
							"\r",
							"\t\tpm.test(\"Assert responce contains a property:bio \", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('profile.bio')\r",
							"\t\t});\r",
							"\r",
							"\t\tpm.test(\"Assert responce contains a property: image\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('profile.image')\r",
							"\t\t});\r",
							"\r",
							"\t\tpm.test(\"Assert responce contains a property: following\", function () {\r",
							"\t\t\tpm.response.to.have.jsonBody('profile.following')\r",
							"\t\t});\r",
							"\r",
							"\t\tif (following){\r",
							"\t\t\tpm.test('Asert that user is followed', function () {\r",
							"\t\t\t\tconst following = true;\r",
							"\t\t\t\tpm.expect(jsonData.profile.following).to.eql(following);\r",
							"\t\t\t});   \r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"const userProfileTestsHelper = functionToString(userProfileTests);\r",
							"pm.collectionVariables.set('userProfileTests', userProfileTestsHelper);"
						]
					}
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Get tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.status === 'OK'){\r",
									"\t\tpm.test(\"Assert responce contains a property: tags\", function () {\r",
									"\t\t\tpm.response.to.have.jsonBody('tags');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Assert property 'tags' has as a value an array containing tags\", function () {\r",
									"\t\t\tconst jsonData = pm.response.json();\r",
									"\t\t\tif (pm.expect(jsonData.tags).to.be.an('array')){\r",
									"\t\t\t\tjsonData.tags.forEach((tag) => {\r",
									"\t\t\t\t\tif (tag !== null & tag !== undefined){\r",
									"\t\t\t\t\t\tpm.expect(tag).to.be.a(\"string\");\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t});\r",
									"\t\t\t}\r",
									"\t\t});\r",
									"\t}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}tags",
							"host": [
								"{{url}}tags"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get Comments",
					"item": [
						{
							"name": "Get comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id1');\r",
											"            setTimeout(function(){\r",
											"                postCommentRequest('articleSlug', 'token2', 'comment1', 'id2');\r",
											"\t\t    }, 2000);\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Comments' folder post-responce\r",
											"const successfulGetCommentsHelper = pm.collectionVariables.get('successfulGetComments');\r",
											"const successfulGetComments = eval(successfulGetCommentsHelper);\r",
											"successfulGetComments();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											"pm.collectionVariables.unset('id1');\r",
											"pm.collectionVariables.unset('id2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments of unexisting article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request  \r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"\tcreateNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"\t\trandomLengthText (10, 100, 'articleSlug', true);    \r",
											"\t}, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const notFoundTestsHelper = pm.collectionVariables.get(\"notFoundTests\");\r",
											"const notFoundTests = eval(notFoundTestsHelper);\r",
											"\r",
											"notFoundTests()\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id1');\r",
											"            setTimeout(function(){\r",
											"                postCommentRequest('articleSlug', 'token2', 'comment1', 'id2');\r",
											"\t\t    }, 2000);\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Get Comments' folder post-responce\r",
											"const successfulGetCommentsHelper = pm.collectionVariables.get('successfulGetComments');\r",
											"const successfulGetComments = eval(successfulGetCommentsHelper);\r",
											"successfulGetComments();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											"pm.collectionVariables.unset('id1');\r",
											"pm.collectionVariables.unset('id2');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"// tests for successful get articles requests\r",
									"const successfulGetComments = () =>{\r",
									"\tpm.test(\"Status code is 200\", function () {\r",
									"\t    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"\tconst jsonData = pm.response.json()\r",
									"\tif (pm.response.status === 'OK'){\r",
									"\t\tpm.test(\"Assert responce contains a property: comments\", function () {\r",
									"\t\t\tpm.response.to.have.jsonBody('comments');\r",
									"\t\t});\r",
									"\r",
									"\t\tpm.test(\"Assert property 'comments' has as a value an array containing coments\", function () {\r",
									"\t\t\tif (pm.expect(jsonData.comments).to.be.an('array')){\r",
									"\t\t\t\tjsonData.comments.forEach((comment) => {\r",
									"\t\t\t\t\tpm.expect(comment).to.be.an('object').that.is.not.empty;\r",
									"\t\t\t\t\tpm.expect(comment).to.have.property('id');\r",
									"\t\t\t\t});\r",
									"\t\t\t}\r",
									"\t\t});\r",
									"\t}\r",
									"}\r",
									"\r",
									"const successfulGetCommentsHelper = functionToString(successfulGetComments);\r",
									"pm.collectionVariables.set('successfulGetComments', successfulGetCommentsHelper);"
								]
							}
						}
					]
				},
				{
					"name": "Post comment",
					"item": [
						{
							"name": "Post a comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"    setTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            randomLengthText (1, 253, 'comment');\r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Comments' folder post-responce\r",
											"const commentSuceessfulTestsHelper = pm.collectionVariables.get('commentSuceessfulTests');\r",
											"const commentSuceessfulTests = eval(commentSuceessfulTestsHelper);\r",
											"\r",
											"commentSuceessfulTests('comment', 'username2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"{{comment}}\"\r\n    }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post a comment under your article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\tsetTimeout(function(){\r",
											"        randomLengthText (1, 253, 'comment');\r",
											"    }, 2000);\r",
											"}, 2000);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Comments' folder post-responce\r",
											"const commentSuceessfulTestsHelper = pm.collectionVariables.get('commentSuceessfulTests');\r",
											"const commentSuceessfulTests = eval(commentSuceessfulTestsHelper);\r",
											"\r",
											"commentSuceessfulTests('comment', 'username1');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"{{comment}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post an empty comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"    setTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"        setTimeout(function(){\r",
											"            pm.collectionVariables.set(\"timeout\", \"to set timeout\");\r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('comment', 'can\\'t be blank');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset(\"timeout\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post a comment containing more than 253 symbols",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"    setTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            randomLengthText (253, 270, 'comment');\r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unprocessableEntityTestsHelper = pm.collectionVariables.get('unprocessableEntityTests');\r",
											"const unprocessableEntityTests = eval(unprocessableEntityTestsHelper);\r",
											"\r",
											"unprocessableEntityTests('comment', 'Comment must  be 1 - 253 characters.');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"{{comment}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post a comment without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            randomLengthText (1, 253, 'comment');\r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"{{comment}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post second comment under the article",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id1');\r",
											"\t\t\tsetTimeout(function(){\r",
											"                randomLengthText (1, 253, 'comment2');\r",
											"            }, 2000);\r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Comments' folder post-responce\r",
											"const commentSuceessfulTestsHelper = pm.collectionVariables.get('commentSuceessfulTests');\r",
											"const commentSuceessfulTests = eval(commentSuceessfulTestsHelper);\r",
											"\r",
											"commentSuceessfulTests('comment2', 'username2');\r",
											"\r",
											"pm.test(\"Assert comment id is unique\", function () {\r",
											"    const id1 = pm.collectionVariables.get('id1');\r",
											"\tconst id2 = pm.response.json().comment.id\r",
											"    pm.expect(id2).not.eql(id1);\r",
											"});\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											"pm.collectionVariables.unset('id1');\r",
											"pm.collectionVariables.unset('comment2');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"{{comment2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post comment after deleting comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const deleteCommentRequestHelper = pm.collectionVariables.get('deleteCommentRequest');\r",
											"const deleteCommentRequest = eval(deleteCommentRequestHelper);  \r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
											"const randomLengthText = eval(randomLengthTextHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"  createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"    createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"        postCommentRequest('articleSlug', 'token2', 'comment1', 'id1');\r",
											"\t\t\tsetTimeout(function(){\r",
											"              deleteCommentRequest ('articleSlug', 'token2', 'id1');\r",
											"                setTimeout(function(){\r",
											"                  randomLengthText (1, 253, 'comment2');\r",
											"                }, 2000);\r",
											"            }, 2000);\r",
											"        }, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the 'Comments' folder post-responce\r",
											"const commentSuceessfulTestsHelper = pm.collectionVariables.get('commentSuceessfulTests');\r",
											"const commentSuceessfulTests = eval(commentSuceessfulTestsHelper);\r",
											"\r",
											"commentSuceessfulTests('comment2', 'username2');\r",
											"\r",
											"pm.test(\"Assert comment id is unique\", function () {\r",
											"  const id1 = pm.collectionVariables.get('id1');\r",
											"\tconst id2 = pm.response.json().comment.id\r",
											"  pm.expect(id2).not.eql(id1);\r",
											"});\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('id1');\r",
											"pm.collectionVariables.unset('comment1');\r",
											"pm.collectionVariables.unset('comment2');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": {\r\n        \"body\": \"{{comment2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a comment",
					"item": [
						{
							"name": "Delete a comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id');\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const noContentTestsHelper = pm.collectionVariables.get(\"noContentTests\");\r",
											"const noContentTests = eval(noContentTestsHelper);\r",
											"\r",
											"noContentTests()\r",
											"\r",
											"// script is in the 'Delete a Comment' folder post-responce\r",
											"const getCommentsRequestHelper = pm.collectionVariables.get('getCommentsRequest');\r",
											"const getCommentsRequest = eval(getCommentsRequestHelper);\r",
											"\r",
											"getCommentsRequest('articleSlug', true, 'id');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments/{{id}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a comment of another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id');\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const forbiddenTestsHelper = pm.collectionVariables.get(\"forbiddenTests\");\r",
											"const forbiddenTests = eval(forbiddenTestsHelper);\r",
											"\r",
											"forbiddenTests()\r",
											"\r",
											"// script is in the 'Delete a Comment' folder post-responce\r",
											"const getCommentsRequestHelper = pm.collectionVariables.get('getCommentsRequest');\r",
											"const getCommentsRequest = eval(getCommentsRequestHelper);\r",
											"\r",
											"getCommentsRequest('articleSlug', false, 'id');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments/{{id}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a comment without authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id');\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const unauthorizedTestsHelper = pm.collectionVariables.get(\"unauthorizedTests\");\r",
											"const unauthorizedTests = eval(unauthorizedTestsHelper);\r",
											"\r",
											"unauthorizedTests();\r",
											"\r",
											"// script is in the 'Delete a Comment' folder post-responce\r",
											"const getCommentsRequestHelper = pm.collectionVariables.get('getCommentsRequest');\r",
											"const getCommentsRequest = eval(getCommentsRequestHelper);\r",
											"\r",
											"getCommentsRequest('articleSlug', false, 'id');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "null",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments/{{id}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete unexisting comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const randomStringHelper = pm.collectionVariables.get('randomString');\r",
											"const randomString = eval(randomStringHelper);\r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            randomString(5, 'id', 'integer');     \r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const notFoundTestsHelper = pm.collectionVariables.get(\"notFoundTests\");\r",
											"const notFoundTests = eval(notFoundTestsHelper);\r",
											"\r",
											"notFoundTests();\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											"pm.collectionVariables.unset('id');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments/{{id}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete first comment of two created",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id1');\r",
											"            setTimeout(function(){\r",
											"                postCommentRequest('articleSlug', 'token2', 'comment1', 'id2');\r",
											"\t\t    }, 2000);\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const noContentTestsHelper = pm.collectionVariables.get(\"noContentTests\");\r",
											"const noContentTests = eval(noContentTestsHelper);\r",
											"\r",
											"noContentTests();\r",
											"\r",
											"// script is in the 'Delete a Comment' folder post-responce\r",
											"const getCommentsRequestHelper = pm.collectionVariables.get('getCommentsRequest');\r",
											"const getCommentsRequest = eval(getCommentsRequestHelper);\r",
											"\r",
											"getCommentsRequest('articleSlug', true, 'id1');\r",
											"getCommentsRequest('articleSlug', false, 'id2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments/{{id1}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments",
										"{{id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second  comment of two created",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// script is in the collection pre-request\r",
											"const createNewUserHelper = pm.collectionVariables.get('createNewUser');\r",
											"const createNewUser = eval(createNewUserHelper);\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const createNewArticleHelper = pm.collectionVariables.get('createNewArticle');\r",
											"const createNewArticle = eval(createNewArticleHelper);\r",
											"\r",
											"// script is in the 'Comments' folder pre-request\r",
											"const postCommentRequestHelper = pm.collectionVariables.get('postCommentRequest');\r",
											"const postCommentRequest = eval(postCommentRequestHelper);  \r",
											"\r",
											"//set timeout between requests\r",
											"createNewUser('username1', 'email1', 'token1');\r",
											"setTimeout(function(){\r",
											"    createNewUser('username2', 'email2', 'token2');\r",
											"\tsetTimeout(function(){\r",
											"        createNewArticle('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist', 'token1', 'articleSlug');\r",
											"\t\tsetTimeout(function(){\r",
											"            postCommentRequest('articleSlug', 'token2', 'comment1', 'id1');\r",
											"            setTimeout(function(){\r",
											"                postCommentRequest('articleSlug', 'token2', 'comment1', 'id2');\r",
											"\t\t    }, 2000);\r",
											"\t\t}, 2000);\r",
											"    }, 2000);\r",
											"}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// script is in the collection post-responce\r",
											"const noContentTestsHelper = pm.collectionVariables.get(\"noContentTests\");\r",
											"const noContentTests = eval(noContentTestsHelper);\r",
											"\r",
											"noContentTests(); \r",
											"\r",
											"// script is in the 'Delete a Comment' folder post-responce\r",
											"const getCommentsRequestHelper = pm.collectionVariables.get('getCommentsRequest');\r",
											"const getCommentsRequest = eval(getCommentsRequestHelper);\r",
											"\r",
											"getCommentsRequest('articleSlug', false, 'id1');\r",
											"getCommentsRequest('articleSlug', true, 'id2');\r",
											"\r",
											"// script is in the collection pre-request\r",
											"const deleteArticleHelper = pm.collectionVariables.get('deleteArticle');\r",
											"const deleteArticle = eval(deleteArticleHelper);\r",
											"\r",
											"deleteArticle(\"articleSlug\", 'token1');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteVariablesHelper = pm.collectionVariables.get('deleteVariables');\r",
											"const deleteVariables = eval(deleteVariablesHelper);\r",
											"\r",
											"deleteVariables('username1', 'email1', 'token1');\r",
											"deleteVariables('username2', 'email2', 'token2');\r",
											"\r",
											"// script is in the collection post-responce\r",
											"const deleteArticleVariablesHelper = pm.collectionVariables.get('deleteArticleVariables');\r",
											"const deleteArticleVariables = eval(deleteArticleVariablesHelper);\r",
											"\r",
											"deleteArticleVariables('articleTitle', 'articleDescription', 'articleBody', 'articleTaglist');\r",
											"\r",
											"pm.collectionVariables.unset('articleSlug');\r",
											"pm.collectionVariables.unset('comment1');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}articles/{{articleSlug}}/comments/{{id2}}",
									"host": [
										"{{url}}articles"
									],
									"path": [
										"{{articleSlug}}",
										"comments",
										"{{id2}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// to convert helper to string\r",
									"function functionToString(helper) {\r",
									"    return helper.toString();\r",
									"}\r",
									"\r",
									"// to get comments\r",
									"// aceepts:\r",
									"// articleSlugVarName - string - name of the variable containing the article slug\r",
									"// deleteSuccess - boolean- true - if we need test to assert that comment was deleted / false - if we need to assert that comment was not deleted\r",
									"// commentIdVarName - - string - name of the variable containing the comment ID\r",
									"const getCommentsRequest = (articleSlugVarName, deleteSuccess, commentIdVarName) =>{\r",
									"\tconst BASE_URL = pm.collectionVariables.get('url');\r",
									"\tconst articleSlug = pm.collectionVariables.get(articleSlugVarName);\r",
									"\tconst url = BASE_URL + 'articles/'+ articleSlug + '/comments';\r",
									"\r",
									"\tconst requestStructure = {\r",
									"\t\turl,  \r",
									"\t\tmethod: 'GET',  \r",
									"\t\theader: {},\r",
									"\t\tbody: {  \r",
									"\t\t\tmode: 'none'\r",
									"\t\t}\r",
									"\t};\r",
									"\r",
									"\tpm.sendRequest(requestStructure, (error, response) => {\r",
									"\t\t\r",
									"        if (deleteSuccess){\r",
									"            pm.test(\"Assert comment is deleted\", function () {\r",
									"                response.json().comments.forEach((comment) => {\r",
									"                    pm.expect(comment.id).not.eql(pm.collectionVariables.get(commentIdVarName));\r",
									"                });\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"Assert comment is not deleted\", function () {\r",
									"                response.json().comments.forEach((comment) => {\r",
									"                    pm.expect(comment.id).to.eql(pm.collectionVariables.get(commentIdVarName));\r",
									"                });\r",
									"            });  \r",
									"        }\t\r",
									"        pm.collectionVariables.unset(commentIdVarName);\r",
									"\t});\r",
									"}\r",
									"\r",
									"const getCommentsRequestHelper = functionToString(getCommentsRequest);\r",
									"pm.collectionVariables.set('getCommentsRequest', getCommentsRequestHelper);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// to convert function to string\r",
							"function functionToString(helper) {\r",
							"    return helper.toString();\r",
							"}\r",
							"\r",
							"// post comment request\r",
							"// aceepts:\r",
							"// articleSlugVarName - string - name of the variable containing article slug\r",
							"// tokenVarName - string - name of the variable containing the token of the user who is posting the comment\r",
							"// commentVarName - string - name of the variable containing the resulting comment\r",
							"// commentIDVarName - string - name of the variable containing an id of the resulting comment\r",
							"const postCommentRequest = (articleSlugVarName, tokenVarName, commentVarName, commentIDVarName) => {\r",
							"    const BASE_URL = pm.collectionVariables.get('url');\r",
							"    const articleSlug = pm.collectionVariables.get(articleSlugVarName);\r",
							"    const url = BASE_URL + `articles/${articleSlug}/comments`; \r",
							"    const token = 'Token ' + pm.collectionVariables.get(tokenVarName);\r",
							"    \r",
							"    // script is in the collection pre-request\r",
							"    const randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
							"    const randomLengthText = eval(randomLengthTextHelper);  \r",
							"\r",
							"    randomLengthText (1, 253, commentVarName);\r",
							"    const commentBody = pm.collectionVariables.get(commentVarName);\r",
							"\r",
							"    const requestStructure = {\r",
							"        url,  \r",
							"        method: 'POST',  \r",
							"        header: {\r",
							"            'Content-Type': 'application/json', \r",
							"            'Authorization': token\r",
							"        },\r",
							"        body: {  \r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                \"comment\": {\r",
							"                    \"body\": `${commentBody}`\r",
							"                }\r",
							"            })\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.sendRequest(requestStructure, (error, response) => {\r",
							"        pm.collectionVariables.set(commentIDVarName, response.json().comment.id);\r",
							"        console.log(error ? error : response.json());\r",
							"    });\r",
							"};\r",
							"\r",
							"const postCommentRequestHelper = functionToString(postCommentRequest); \r",
							"pm.collectionVariables.set('postCommentRequest', postCommentRequestHelper);\r",
							"\r",
							"// delete comment request\r",
							"// aceepts:\r",
							"// articleSlugVarName - string - name of the variable containing article slug\r",
							"// tokenVarName - string - name of the variable containing the token of the user who is posting the comment\r",
							"// commentIDVarName - string - name of the variable containing the id of the comment to be deleted\r",
							"const deleteCommentRequest = (articleSlugVarName, tokenVarName, commentIDVarName) => {\r",
							"    const BASE_URL = pm.collectionVariables.get('url');\r",
							"    const articleSlug = pm.collectionVariables.get(articleSlugVarName);\r",
							"    const commentId = pm.collectionVariables.get(commentIDVarName);\r",
							"    const url = BASE_URL + `articles/${articleSlug}/comments/${commentId}`; \r",
							"    const token = 'Token ' + pm.collectionVariables.get(tokenVarName);\r",
							"\r",
							"\r",
							"    const requestStructure = {\r",
							"        url,  \r",
							"        method: 'DELETE',  \r",
							"        header: {\r",
							"            'Authorization': token\r",
							"        },\r",
							"        body: {  \r",
							"            mode: 'none',\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.sendRequest(requestStructure, (error, response) => {});\r",
							"};\r",
							"\r",
							"const deleteCommentRequestHelper = functionToString(deleteCommentRequest); \r",
							"pm.collectionVariables.set('deleteCommentRequest', deleteCommentRequestHelper);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// to convert helper to string\r",
							"function functionToString(helper) {\r",
							"    return helper.toString();\r",
							"}\r",
							"\r",
							"// successful comment tests\r",
							"// accepts:\r",
							"// commentVarName - string - name of the variable containing the comment\r",
							"// userVarName - string - name of the variable containing the username\r",
							"const commentSuceessfulTests = (commentVarName, userVarName) =>{\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    if (pm.response.status === 'OK'){\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.test(\"Assert responce contains a property: id\", function () {\r",
							"            pm.response.to.have.jsonBody('comment.id');\r",
							"        });\r",
							"\r",
							"        pm.test('Assert response contains a property: body', function () {\r",
							"            const body = pm.collectionVariables.get(commentVarName);\r",
							"            pm.expect(jsonData.comment.body).to.eql(body);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: createdAt\", function () {\r",
							"            pm.response.to.have.jsonBody('comment.createdAt');\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: updatedAt\", function () {\r",
							"        pm.response.to.have.jsonBody('comment.updatedAt');\r",
							"        });\r",
							"\r",
							"        pm.test(\"Assert responce contains a property: author's username\", function () {\r",
							"            const username = pm.collectionVariables.get(userVarName);\r",
							"            pm.expect(jsonData.comment.author.username).to.eql(username);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"const commentSuceessfulTestsHelper = functionToString(commentSuceessfulTests);\r",
							"pm.collectionVariables.set('commentSuceessfulTests', commentSuceessfulTestsHelper);"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// to convert function to string\r",
					"function functionToString(helper) {\r",
					"    return helper.toString();\r",
					"}\r",
					"\r",
					"// to create a user in prerequest\r",
					"// accepts:\r",
					"// usernameVarName - string - name of variable containing resulting username\r",
					"// emailVarName - string - name of variable containing resulting email\r",
					"// tokenVarName - string - name of variable containing resulting token\r",
					"const createNewUser = (usernameVarName, emaiVarName, tokenVarName) => {\r",
					"\tconst BASE_URL = pm.collectionVariables.get('url');\r",
					"\tconst url = BASE_URL + 'users'; \r",
					"\r",
					"\t// script is in the collection pre-request\r",
					"\tconst randomCredentialsHelper = pm.collectionVariables.get('randomCredentials');\r",
					"\tconst randomCredentials = eval(randomCredentialsHelper);\r",
					"\r",
					"\trandomCredentials(usernameVarName, emaiVarName);\r",
					"\r",
					"\tconst body = {\r",
					"\t\tusername: pm.collectionVariables.get(usernameVarName),\r",
					"\t\temail: pm.collectionVariables.get(emaiVarName),\r",
					"\t\tpassword: pm.collectionVariables.get(\"passwordConduit\")\r",
					"\t}\r",
					"\r",
					"\tconst requestStructure = {\r",
					"\t\turl,  \r",
					"\t\tmethod: 'POST',  \r",
					"\t\theader: {\r",
					"\t\t  'Content-Type': 'application/json',  \r",
					"\t\t},\r",
					"\t\tbody: {  \r",
					"\t\t\tmode: 'raw',\r",
					"\t\t\traw: JSON.stringify({\r",
					"\t\t\t\t\"user\": {\r",
					"\t\t\t\t\t\"username\": body.username,\r",
					"\t\t\t\t\t\"email\": body.email,\r",
					"\t\t\t\t\t\"password\": body.password,\r",
					"\t\t\t\t}\r",
					"\t\t\t})\r",
					"\t\t}\r",
					"\t};\r",
					"\r",
					"\tpm.sendRequest(requestStructure, (error, response) => {\r",
					"\t\tpm.collectionVariables.set(tokenVarName, response.json().user.token);\r",
					"\t\tpm.collectionVariables.set(emaiVarName, response.json().user.email);\r",
					"\t\tpm.collectionVariables.set(usernameVarName, response.json().user.username);\r",
					"\t\tconsole.log(error ? error : response.json());\r",
					"\t});\r",
					"};\r",
					"\r",
					"const createNewUserHelper = functionToString(createNewUser); \r",
					"pm.collectionVariables.set('createNewUser', createNewUserHelper);\r",
					"\r",
					"\r",
					"// for create new article request\r",
					"// accepts:\r",
					"// titleVarName -sting- name of the variable containing the article's title\r",
					"// descriptionVarNme -sting- name of the variable containing the article's description\r",
					"// bodyVarName -sting- name of the variable containing the article's body\r",
					"// tagListVarName -array- name of the variable containing the article's tagList\r",
					"// tokenVarName -sting- name of variable containing the author's token \r",
					"// slugVarName -sting- name of the variable to contain resulting slug\r",
					"\r",
					"const createNewArticle = (titleVarName, descriptionVarNme, bodyVarName, tagListVarName, tokenVarName, slugVarName) =>{\r",
					"    const BASE_URL = pm.collectionVariables.get('url');\r",
					"    const url = BASE_URL + 'articles'; \r",
					"    const token = 'Token '+ pm.collectionVariables.get(tokenVarName);\r",
					"\r",
					"    // script is in the collection pre-request\r",
					"    const articleVariablesHelper = pm.collectionVariables.get('articleVariables');\r",
					"    const articleVariables = eval(articleVariablesHelper);\r",
					"\r",
					"    articleVariables(titleVarName, descriptionVarNme, bodyVarName, tagListVarName);\r",
					"\r",
					"    const body = {\r",
					"        title: pm.collectionVariables.get(titleVarName),\r",
					"        description: pm.collectionVariables.get(descriptionVarNme),\r",
					"        body: pm.collectionVariables.get(bodyVarName),\r",
					"        tagList:  JSON.parse(pm.collectionVariables.get(tagListVarName))\r",
					"    }\r",
					"\r",
					"\tconst requestStructure = {\r",
					"\t\turl,  \r",
					"\t\tmethod: 'POST',  \r",
					"\t\theader: {\r",
					"\t\t\t'Content-Type': 'application/json',  \r",
					"\t\t\t'Authorization': token\r",
					"\t\t},\r",
					"\t\tbody: {  \r",
					"\t\t\tmode: 'raw',\r",
					"\t\t\traw: JSON.stringify({\r",
					"\t\t\t\t\"article\": {\r",
					"\t\t\t\t\t\"title\": body.title,\r",
					"\t\t\t\t\t\"description\": body.description,\r",
					"\t\t\t\t\t\"body\": body.body,\r",
					"\t\t\t\t\t\"tagList\": body.tagList\r",
					"\t\t\t\t}\r",
					"\t\t\t})\r",
					"\t\t}\r",
					"\t};\r",
					"\r",
					"\tpm.sendRequest(requestStructure, (error, response) => {\r",
					"\t\tpm.collectionVariables.set(slugVarName, response.json().article.slug);\r",
					"\t\tconsole.log(error ? error : response.json());\r",
					"\t});\r",
					"}\r",
					"\r",
					"const createNewArticleHelper = functionToString(createNewArticle); \r",
					"pm.collectionVariables.set('createNewArticle', createNewArticleHelper);\r",
					"\r",
					"\r",
					"// request to delete article\r",
					"// accepts:\r",
					"// slugVarName -sting- name of the variable to containing slug\r",
					"// tokenVarName -sting- name of variable containing the author's token \r",
					"const deleteArticle = (slugVarName, tokenVarName) =>{\r",
					"    const BASE_URL = pm.collectionVariables.get('url');\r",
					"    const articleSlug = pm.collectionVariables.get(slugVarName);\r",
					"    const url = BASE_URL + 'articles/' + articleSlug; \r",
					"    const token = 'Token '+ pm.collectionVariables.get(tokenVarName);\r",
					"\r",
					"\tconst requestStructure = {\r",
					"\t\turl,  \r",
					"\t\tmethod: 'DELETE',  \r",
					"\t\theader: {\r",
					"\t\t\t'Authorization': token\r",
					"\t\t},\r",
					"\t\tbody: {  \r",
					"\t\t\tmode: 'none'\r",
					"\t\t}\r",
					"\t};\r",
					"\r",
					"\tpm.sendRequest(requestStructure, (error, response) => {});\r",
					"}\r",
					"\r",
					"const deleteArticleHelper = functionToString(deleteArticle); \r",
					"pm.collectionVariables.set('deleteArticle', deleteArticleHelper);\r",
					"\r",
					"\r",
					"//to follow a user\r",
					"// accepts:\r",
					"// usernameVarName - string - the variable containing the username of the user to be followed\r",
					"// tokenVarName - string - the variable containing the token of the user that is following other user\r",
					"const followUserRequest = (usernameVarName, tokenVarName) => {\r",
					"    const BASE_URL = pm.collectionVariables.get('url');\r",
					"    const username = pm.collectionVariables.get(usernameVarName);\r",
					"    const endopoint = `profiles/${username}/follow`;\r",
					"    const url = BASE_URL + endopoint; \r",
					"    const token = 'Token '+ pm.collectionVariables.get(tokenVarName);\r",
					"\r",
					"    const requestStructure = {\r",
					"\t\turl,  \r",
					"\t\tmethod: 'POST',  \r",
					"\t\theader: {\r",
					"\t\t\t'Content-Type': 'application/json',  \r",
					"\t\t\t'Authorization': token\r",
					"\t\t},\r",
					"\t\tbody: {  \r",
					"\t\t\tmode: 'raw',\r",
					"\t\t\traw: JSON.stringify({})\r",
					"\t\t}\r",
					"\t};\r",
					"\r",
					"\tpm.sendRequest(requestStructure, (error, response) => {\r",
					"\t\tconsole.log(error ? error : response.json());\r",
					"\t});\r",
					"}\r",
					"const followUserRequestHelper = functionToString(followUserRequest); \r",
					"pm.collectionVariables.set('followUserRequest', followUserRequestHelper);\r",
					"\r",
					"\r",
					"// to generate random text of a specified length range\r",
					"// accepts:\r",
					"// min - integer - minimal length\r",
					"// max - integer - maximal lenght\r",
					"// textVarName - name of the variable to contain resulting text(\"randomText\" is default)\r",
					"// slug - boolean - true (when we need text for slug) / false - default state\r",
					"const randomLengthText = (min, max, textVarName = \"randomText\", slug = false) =>{\r",
					"    let characters = '';\r",
					"    if (slug) {\r",
					"        characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_~ \";\r",
					"    } else {\r",
					"        characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!?,-'&%*. \";\r",
					"    }\r",
					"\t\r",
					"\tconst length = Math.floor(Math.random() * (max - min + 1)) + min;\r",
					"\tlet randomText = '';\r",
					"\r",
					"\tfor (let i = 0; i < length; i++) {\r",
					"\t\trandomText += characters[Math.floor(Math.random() * characters.length)];\r",
					"\t}\r",
					"\r",
					"\tpm.collectionVariables.set(textVarName, randomText);\r",
					"}\r",
					"\r",
					"const randomLengthTextHelper = functionToString(randomLengthText); \r",
					"pm.collectionVariables.set('randomLengthText', randomLengthTextHelper);\r",
					"\r",
					"// to generate random text of a specified length (strict)\r",
					"// should be used with the 'Clear a collection variable' script\r",
					"// accepts:\r",
					"// length - integer - length of the string to be generated\r",
					"// stringName - string - name of the variable containing the resulting string\r",
					"// base - string - 'cyrillic' / 'integer' / 'latinSmall' / 'slug' for cirillic, integer and only small latin strings (general latin is default) \r",
					"const randomString = (length, stringName, base = false) =>{\r",
					"\tlet dataSet = '';\r",
					"\r",
					"\tif (base === 'cyrillic'){\r",
					"\t\tdataSet = 'йцукенгшщзхїфівапролджєячсмитьбюЙЦУКЕНГШЩЗХЇФІВАПРОЛДЖЄЯЧСМИТЬБЮ';  \r",
					"\t} else if (base === 'integer'){\r",
					"\t\tdataSet = '1234567890'; \r",
					"\t} else if (base === 'latinSmall'){\r",
					"\t\tdataSet = 'abcdefghijklmnopqrstuvwxyz';\r",
					"\t} else {\r",
					"\t\tdataSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
					"\t}\r",
					"\r",
					"\tlet result = \"\";\r",
					"\r",
					"\tfor (let i = 0; i < length; i++){\r",
					"\t\tresult += dataSet[Math.floor(Math.random() * dataSet.length)];\r",
					"\t} \r",
					"\r",
					"\tpm.collectionVariables.set(stringName, result);  \r",
					"}\r",
					"\r",
					"const randomStringHelper = functionToString(randomString); \r",
					"pm.collectionVariables.set('randomString', randomStringHelper);\r",
					"\r",
					"// to generte random credentials: username, email\r",
					"// accepts:\r",
					"// usernameVarName - string - name of variable containing resulting username\r",
					"// emailVarName - string - name of variable containing resulting email\r",
					"const randomCredentials = (usernameVarName, emailVarName) =>{\r",
					"    \r",
					"\t// script is in the collection pre-request\r",
					"\tconst randomStringHelper = pm.collectionVariables.get('randomString');\r",
					"\tconst randomString = eval(randomStringHelper);\r",
					"\r",
					"\trandomString(5, 'randomUser');\r",
					"    randomString(5, 'randomUser1');\r",
					"\r",
					"\tconst usernameRandom = pm.collectionVariables.get(\"randomUser\") + pm.collectionVariables.get(\"randomUser1\") + Math.floor(Math.random(1000)/1000);\r",
					"\r",
					"\tpm.collectionVariables.set(usernameVarName, usernameRandom);\r",
					"\r",
					"\tfunction randomEmail(n,m){\r",
					"\t\trandomString(n, 'domen');\r",
					"\t\trandomString(m, 'tld');\r",
					"\t\tconst email = '@'+ pm.collectionVariables.get(\"domen\") + '.' + pm.collectionVariables.get(\"tld\");\r",
					"\t\treturn email;\r",
					"\t}\r",
					"\r",
					"\tconst emailFromUsername = usernameRandom + randomEmail(5,3);\r",
					"\r",
					"\tpm.collectionVariables.set(emailVarName, emailFromUsername);\r",
					"\t\r",
					"\tpm.collectionVariables.unset(\"tld\");\r",
					"\tpm.collectionVariables.unset(\"domen\");\r",
					"\tpm.collectionVariables.unset(\"randomUser\");\r",
					"}\r",
					"\r",
					"const randomCredentialsHelper = functionToString(randomCredentials); \r",
					"pm.collectionVariables.set('randomCredentials', randomCredentialsHelper);\r",
					"\r",
					"\r",
					"// for random username (when only username is needed)\r",
					"// accepts: \r",
					"// length - integer - min length\r",
					"// usernameVarName - string - name of the variable containing the resulting username\r",
					"// srict - boolean - true - length should be strict / false - length may be variable\r",
					"// additional - string - specify the symbols that username should contain / '' - username should contain no specified symbols\r",
					"const randomUsernameSolo = (length, usernameVarName, strict, additional = '') =>{\r",
					"    \r",
					"\t// script is in the collection pre-request\r",
					"\tconst randomStringHelper = pm.collectionVariables.get('randomString');\r",
					"\tconst randomString = eval(randomStringHelper);\r",
					"\trandomString(length, 'usernameCondition')\r",
					"    randomString(length, 'usernameCondition1')\r",
					"\r",
					"\tlet usernameRandom = '';\r",
					"\tif (strict){\r",
					"\t\tusernameRandom = pm.collectionVariables.get('usernameCondition');\r",
					"\t} else {\r",
					"\t\tusernameRandom = pm.collectionVariables.get('usernameCondition') + additional + pm.collectionVariables.get('usernameCondition1') + Math.floor(Math.random(1000)/1000);\r",
					"\t}  \r",
					"\r",
					"\tpm.collectionVariables.set(usernameVarName, usernameRandom); \r",
					"\r",
					"\tpm.collectionVariables.unset(\"usernameCondition\");  \r",
					"}\r",
					"\r",
					"const randomUsernameSoloHelper = functionToString(randomUsernameSolo); \r",
					"pm.collectionVariables.set('randomUsernameSolo', randomUsernameSoloHelper);\r",
					"\r",
					"// for random email (when only email is needed)\r",
					"// accepts: \r",
					"// namePartLength - integer - indicates length of the name part\r",
					"// emailVarName - string -  name of variable containing resulting email\r",
					"// specialSymbolAbsent - string - \"@\" in the situations when we need email without @\r",
					"// dotAbsent -string -  \".\" in the situations when we need email without dot\r",
					"// addSymbol -  string - to add symbol to the name part\r",
					"const randomEmailSolo = (namePartLength, emailVarName, specialSymbolAbsent = '', dotAbsent = '', addSymbol = '') => {\r",
					"    \r",
					"\t// script is in the collection pre-request\r",
					"\tconst randomStringHelper = pm.collectionVariables.get('randomString');\r",
					"\tconst randomString = eval(randomStringHelper);\r",
					"\t\r",
					"\tfunction randomEmail(n, m, special, dot){\r",
					"\t\tlet email = '';\r",
					"\t\trandomString(n, 'domen');\r",
					"\t\trandomString(m, 'tld');\r",
					"\r",
					"\t\tif(special === '@'){\r",
					"\t\t\temail = pm.collectionVariables.get(\"domen\") + '.' + pm.collectionVariables.get(\"tld\");\r",
					"\t\t} else if (dot === '.'){\r",
					"\t\t\temail = '@'+ pm.collectionVariables.get(\"domen\") + pm.collectionVariables.get(\"tld\");\r",
					"\t\t} else {\r",
					"\t\t\temail = '@'+ pm.collectionVariables.get(\"domen\") + '.' + pm.collectionVariables.get(\"tld\");\r",
					"\t\t}\r",
					"\r",
					"\t\treturn email;\r",
					"\t}\r",
					"\r",
					"\trandomString(namePartLength, 'namePart')\r",
					"\tconst usernameRandom = pm.collectionVariables.get(\"namePart\");\r",
					"\tconst emailFromUsername = usernameRandom + addSymbol + randomEmail(5,3, specialSymbolAbsent, dotAbsent);\r",
					"\r",
					"\tpm.collectionVariables.set(emailVarName, emailFromUsername);\r",
					"\r",
					"\tpm.collectionVariables.unset(\"tld\");\r",
					"\tpm.collectionVariables.unset(\"domen\");\r",
					"\tpm.collectionVariables.unset(\"namePart\");\r",
					"}\r",
					"\r",
					"const randomEmailSoloHelper = functionToString(randomEmailSolo); \r",
					"pm.collectionVariables.set('randomEmailSolo', randomEmailSoloHelper);\r",
					"\r",
					"\r",
					"// for new tag list creation (returnes an collection variable containing an array with tags \r",
					"// accepts: \r",
					"// max -integer - max number of tags\r",
					"// min - integer - min number of tags\r",
					"// tagListVarName - string - name of the variable containing the resulting tag list\r",
					"const tagListCreation = (max, min, tagListVarName) =>{\r",
					"    \r",
					"    // script is in the collection pre-request\r",
					"\tconst randomStringHelper = pm.collectionVariables.get('randomString');\r",
					"\tconst randomString = eval(randomStringHelper);\r",
					"\r",
					"\tlet tags = [];\r",
					"\tconst tagNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r",
					"\r",
					"\tfor (i = 0; i < tagNumber; i++){\r",
					"\t\trandomString(10, 'word')\r",
					"      const word = pm.collectionVariables.get('word');\r",
					"\t\ttags.push(word);\r",
					"\t}\r",
					"\r",
					"\tpm.collectionVariables.set(tagListVarName, JSON.stringify(tags));\t\r",
					"    \r",
					"  pm.collectionVariables.unset(\"word\"); \r",
					"}\r",
					"\r",
					"const tagListCreationHelper = functionToString(tagListCreation); \r",
					"pm.collectionVariables.set('tagListCreation', tagListCreationHelper);\r",
					"\r",
					"// variables for new article creation\r",
					"// accepts:\r",
					"// 1. mandatory parameters:\r",
					"// title - sting - name of the variable containing article title\r",
					"// description - string - name of the variable containing article description\r",
					"// body - string - name of the variable containing article body\r",
					"// taglist - - string - name of the variable containing article taglist\r",
					"// 2. addional parameters (have default value):\r",
					"// titleMax - number - max length of the title (default 255 symbols)\r",
					"// titleMin - number - min length of the title (default 1 symbol)\r",
					"// descriptionMin - number - min length of the title (default 1 symbol) \r",
					"// descriptionMax - number - max length of the description (default 255 symbols)  \r",
					"// bodyMin - number - min length of the title (default 1 symbol)\r",
					"// bodyMax - number - max length of the body (default 30000 symbols)  \r",
					"// tagNumberMax - number - max number of tags (default - 38 tags)\r",
					"// tagNumberMin - number - min number of tags (default - 1 tag)\r",
					"\r",
					"const articleVariables = (title, description, body, taglist, titleMin = 1, titleMax = 245, descriptionMin = 1, descriptionMax = 245, bodyMin = 1, bodyMax = 10000, tagNumberMin = 1, tagNumberMax = 10) =>{\r",
					"    \r",
					"    // script is in the collection pre-request\r",
					"\tconst randomLengthTextHelper = pm.collectionVariables.get('randomLengthText');\r",
					"\tconst randomLengthText = eval(randomLengthTextHelper);  \r",
					"\r",
					"\trandomLengthText (titleMin, titleMax, title);\r",
					"\trandomLengthText (descriptionMin, descriptionMax, description);\r",
					"\trandomLengthText (bodyMin, bodyMax, body);\r",
					"    \r",
					"    // script is in the collection pre-request\r",
					"    const tagListCreationHelper = pm.collectionVariables.get('tagListCreation');\r",
					"\tconst tagListCreation = eval(tagListCreationHelper);\r",
					"\r",
					"    tagListCreation(tagNumberMax, tagNumberMin, taglist);\r",
					"\r",
					"}\r",
					"\r",
					"const articleVariablesHelper = functionToString(articleVariables); \r",
					"pm.collectionVariables.set('articleVariables', articleVariablesHelper);\r",
					"\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// to convert function to string\r",
					"function functionToString(helper) {\r",
					"    return helper.toString();\r",
					"}\r",
					"\r",
					"// Function to delete created collection variables: token, email, username\r",
					"// accepts:\r",
					"// usernameVarName - string - name of variable containing username\r",
					"// emailVarName - string - name of variable containing email\r",
					"// tokenVarName - string - name of variable containing token\r",
					"const deleteVariables = (usernameVarName, emaiVarName, tokenVarName) =>{\r",
					"    pm.collectionVariables.unset(usernameVarName);\r",
					"    pm.collectionVariables.unset(emaiVarName);\r",
					"    pm.collectionVariables.unset(tokenVarName);\r",
					"}\r",
					"\r",
					"const deleteVariablesHelper = functionToString(deleteVariables);\r",
					"pm.collectionVariables.set('deleteVariables', deleteVariablesHelper);\r",
					"\r",
					"\r",
					"// sign-in request with status code test\r",
					"// accepts: \r",
					"// email - string - email for signing in\r",
					"// password - string - password for signing in\r",
					"// registerCondition - boolean - true (for situations when we need to assert successful sign in) / false (for situations where we need to assert UNsuccessful sign in)\r",
					"const signInRequest = (email, password, registerCondition) => {\r",
					"    const BASE_URL = pm.collectionVariables.get('url');\r",
					"    const url = BASE_URL + 'users/login'; \r",
					"\r",
					"    const body = {\r",
					"        email: email,\r",
					"        password: password\r",
					"    }\r",
					"\r",
					"    const requestStructure = {\r",
					"        url,  \r",
					"        method: 'POST',  \r",
					"        header: {\r",
					"            'Content-Type': 'application/json',  \r",
					"        },\r",
					"        body: {  \r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                \"user\": {\r",
					"                    \"email\": body.email,\r",
					"                    \"password\": body.password,\r",
					"                }\r",
					"            })\r",
					"        }\r",
					"    }\r",
					"\r",
					"    pm.sendRequest(requestStructure, (error, response) => {\r",
					"        if (registerCondition){\r",
					"            pm.test('User is able to sign in with new password', function () {\r",
					"                const postResponceStatus = response.status;\r",
					"                const statusCode200 = 'OK';\r",
					"\r",
					"                pm.expect(postResponceStatus).to.eql(statusCode200);\r",
					"            });\r",
					"        }else {\r",
					"            pm.test('User is NOT able to sign in with empty password', function () {\r",
					"                const postResponceStatus = response.status;\r",
					"                const statusCode422 = 'Unprocessable Entity';\r",
					"\r",
					"                pm.expect(postResponceStatus).to.eql(statusCode422);\r",
					"            });\r",
					"        }\r",
					"        console.log(error ? error : response.json());\r",
					"    });\r",
					"};\r",
					"\r",
					"const signInRequestHelper = functionToString(signInRequest); \r",
					"pm.collectionVariables.set('signInRequest', signInRequestHelper);\r",
					"\r",
					"\r",
					"// Tests for status code 422\r",
					"// accepts:\r",
					"// value - srting - name of the  affected property\r",
					"// message - string - expected message\r",
					"const unprocessableEntityTests = (value, message) =>{\r",
					"    pm.test('Assert status code is 422', function () {\r",
					"        pm.response.to.have.status(422);\r",
					"    });\r",
					"  \r",
					"    if (pm.response.status === 'Unprocessable Entity'){\r",
					"\r",
					"        pm.test('Assert response contains validation message', function () {\r",
					"            const jsonData = pm.response.json();\r",
					"\r",
					"            pm.expect(jsonData.errors[value]).to.eql(message);\r",
					"        }); \r",
					"    }\r",
					"}\r",
					"\r",
					"const unprocessableEntityTestsHelper = functionToString(unprocessableEntityTests);\r",
					"pm.collectionVariables.set('unprocessableEntityTests', unprocessableEntityTestsHelper);\r",
					"\r",
					"\r",
					"// Unauthorized tests  - status code 401\r",
					"const unauthorizedTests = () =>{\r",
					"    pm.test(\"Status code is 401\", function () {\r",
					"        pm.response.to.have.status(401);\r",
					"    });\r",
					"\r",
					"    if (pm.response.status === 'Unauthorized'){\r",
					"        pm.test(\"'Unauthorized' is indicated in the body\", function () {\r",
					"            pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					"const unauthorizedTestsHelper = functionToString(unauthorizedTests);\r",
					"pm.collectionVariables.set('unauthorizedTests', unauthorizedTestsHelper);\r",
					"\r",
					"\r",
					"// to delete variables after new article creation\r",
					"// accepts:\r",
					"// title - string - name of variable containing article title\r",
					"// description - string - name of variable containing article description\r",
					"// body - string - name of variable containing article body\r",
					"// taglist - string - name of variable containing article taglist\r",
					"const deleteArticleVariables = (title, description, body, taglist) =>{\r",
					"    pm.collectionVariables.unset(title);\r",
					"    pm.collectionVariables.unset(description);\r",
					"    pm.collectionVariables.unset(body);\r",
					"    pm.collectionVariables.unset(taglist);\r",
					"}\r",
					"\r",
					"const deleteArticleVariablesHelper = functionToString(deleteArticleVariables);\r",
					"pm.collectionVariables.set('deleteArticleVariables', deleteArticleVariablesHelper);\r",
					"\r",
					"\r",
					"// Forbidden tests  - status code 403\r",
					"const forbiddenTests = () =>{\r",
					"    pm.test(\"Status code is 403\", function () {\r",
					"        pm.response.to.have.status(403);\r",
					"    });\r",
					"\r",
					"    if (pm.response.status === 'Forbidden'){\r",
					"        pm.test(\"'Forbidden' is indicated in the body\", function () {\r",
					"            pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					"const forbiddenTestsHelper = functionToString(forbiddenTests);\r",
					"pm.collectionVariables.set('forbiddenTests', forbiddenTestsHelper);\r",
					"\r",
					"\r",
					"\r",
					"// 'Not Found' tests  - status code 404\r",
					"const notFoundTests = () =>{\r",
					"    pm.test(\"Status code is 404\", function () {\r",
					"        pm.response.to.have.status(404);\r",
					"    });\r",
					"\r",
					"    if (pm.response.status === 'Not Found'){\r",
					"        pm.test(\"'Not Found' is indicated in the body\", function () {\r",
					"            pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					"const notFoundTestsHelper = functionToString(notFoundTests);\r",
					"pm.collectionVariables.set('notFoundTests', notFoundTestsHelper);\r",
					"\r",
					"\r",
					"// 'No Content' tests  - status code 204\r",
					"const noContentTests = () =>{\r",
					"    pm.test(\"Status code is 204\", function () {\r",
					"        pm.response.to.have.status(204);\r",
					"    });\r",
					"\r",
					"    if (pm.response.status === 'No Content'){\r",
					"        pm.test(\"Assert responce body is empty\", function () {\r",
					"            const responseBody = pm.response.text();\r",
					"            pm.expect(responseBody).is.empty;\r",
					"        });\r",
					"    } \r",
					"}\r",
					"\r",
					"const noContentTestsHelper = functionToString(noContentTests);\r",
					"pm.collectionVariables.set('noContentTests', noContentTestsHelper);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://conduit.mate.academy/api/",
			"type": "string"
		},
		{
			"key": "passwordConduit",
			"value": "Pa$$word1!",
			"type": "string"
		},
		{
			"key": "createNewUser",
			"value": ""
		},
		{
			"key": "createNewArticle",
			"value": ""
		},
		{
			"key": "followUserRequest",
			"value": ""
		},
		{
			"key": "randomLengthText",
			"value": ""
		},
		{
			"key": "randomString",
			"value": ""
		},
		{
			"key": "randomCredentials",
			"value": ""
		},
		{
			"key": "randomUsernameSolo",
			"value": ""
		},
		{
			"key": "randomEmailSolo",
			"value": ""
		},
		{
			"key": "tagListCreation",
			"value": ""
		},
		{
			"key": "articleVariables",
			"value": ""
		},
		{
			"key": "deleteVariables",
			"value": ""
		},
		{
			"key": "signInRequest",
			"value": ""
		},
		{
			"key": "unprocessableEntityTests",
			"value": ""
		},
		{
			"key": "unauthorizedTests",
			"value": ""
		},
		{
			"key": "deleteArticleVariables",
			"value": ""
		},
		{
			"key": "forbiddenTests",
			"value": ""
		},
		{
			"key": "notFoundTests",
			"value": ""
		},
		{
			"key": "noContentTests",
			"value": ""
		},
		{
			"key": "basicAuthorizedTests",
			"value": ""
		},
		{
			"key": "successfulSignIn",
			"value": ""
		},
		{
			"key": "successfulSignUp",
			"value": ""
		},
		{
			"key": "deleteVariablesSignUp",
			"value": ""
		},
		{
			"key": "articleSuccessfulTests",
			"value": ""
		},
		{
			"key": "getAllTagsRequest",
			"value": ""
		},
		{
			"key": "getTag",
			"value": ""
		},
		{
			"key": "successfulGetArticles",
			"value": ""
		},
		{
			"key": "containSpecTag",
			"value": ""
		},
		{
			"key": "getArticleRequest",
			"value": ""
		},
		{
			"key": "unfollowProfileRequest",
			"value": ""
		},
		{
			"key": "userProfileTests",
			"value": ""
		},
		{
			"key": "postCommentRequest",
			"value": ""
		},
		{
			"key": "deleteCommentRequest",
			"value": ""
		},
		{
			"key": "commentSuceessfulTests",
			"value": ""
		},
		{
			"key": "successfulGetComments",
			"value": ""
		},
		{
			"key": "getCommentsRequest",
			"value": ""
		},
		{
			"key": "deleteArticle",
			"value": ""
		},
		{
			"key": "articleTaglist1",
			"value": ""
		},
		{
			"key": "randomUser1",
			"value": ""
		},
		{
			"key": "usernameCondition1",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "articleTitle",
			"value": ""
		},
		{
			"key": "articleDescription",
			"value": ""
		},
		{
			"key": "articleBody",
			"value": ""
		},
		{
			"key": "articleTaglist",
			"value": ""
		},
		{
			"key": "articleBody2",
			"value": ""
		},
		{
			"key": "articleDescription2",
			"value": ""
		}
	]
}